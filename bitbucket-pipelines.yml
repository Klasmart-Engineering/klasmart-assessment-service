definitions:
  services:
    postgres:
      image: postgres
      environment:
        POSTGRES_DB: test_user_db
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: assessments
    redis:
      image: redis

  caches:
    nodemodules: ./node_modules
  
  scripts:
    - script: 
      - &skip-bitbucket-authored-commits
        '[[ $(git log -1 --pretty=%an) == "bitbucket-pipelines" ]] && echo "Commit author is bitbucket-pipelines - exiting Pipeline" && exit 0'

    - script: &docker-build-and-push-to-aws
      - pip3 install -U awscli

      - export BRANCH_TAG=$([[ ! -z "$BITBUCKET_BRANCH" ]] && echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}' || echo "master")
      - export REPO=$DOCKER_REPO_URL/kidsloop-assessment # DOCKER_REPO_URL is workspace wide variable
      - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
      - printf '"Git tag":"%s", "Git branch":"%s", "Git commit":"%s" "ECR repo":"%s"' $BITBUCKET_TAG $BRANCH_TAG $COMMIT_TAG $REPO

      - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL

      - export MAJOR_VERSION=$(echo $BITBUCKET_TAG | grep -o "[v][0-9]")
      - export MINOR_VERSION=$(echo $BITBUCKET_TAG | grep -o "[v][0-9].[0-9]")
      - export PATCH_VERSION=$(echo $BITBUCKET_TAG | grep -o "[v][0-9].[0-9].[0-9]")
      - echo "$MAJOR_VERSION, $MINOR_VERSION, $PATCH_VERSION"

      - docker build -t kidsloop-assessment .
      - docker tag kidsloop-assessment:latest $REPO:$MAJOR_VERSION
      - docker tag kidsloop-assessment:latest $REPO:$MINOR_VERSION
      - docker tag kidsloop-assessment:latest $REPO:$BITBUCKET_TAG
      - docker tag kidsloop-assessment:latest $REPO:$BRANCH_TAG
      - docker tag kidsloop-assessment:latest $REPO:$BRANCH_TAG-latest
      - docker tag kidsloop-assessment:latest $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
      - docker tag kidsloop-assessment:latest $REPO:$BRANCH_TAG-$COMMIT_TAG

      - docker push $REPO:$MAJOR_VERSION
      - docker push $REPO:$MINOR_VERSION
      - docker push $REPO:$BITBUCKET_TAG
      - docker push $REPO:$BRANCH_TAG
      - docker push $REPO:$BRANCH_TAG-latest
      - docker push $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
      - docker push $REPO:$BRANCH_TAG-$COMMIT_TAG

  steps:
    - step: &npm-install-and-test
        name: '‚ö° npm install and test'
        image: node:16
        services:
          - postgres
          - redis
        script:
          - *skip-bitbucket-authored-commits
          - export HUSKY=0
          - npm i
          - TEST_POSTGRES_PORT=5432 npm run test:codecov
        caches:
          - nodemodules
        artifacts:
          - node_modules/**

    - step: &npm-build
        name: '‚ö° npm build'
        image: node:16
        script:
          - *skip-bitbucket-authored-commits
          - npm run build
        artifacts:
          - dist/**

    - step: &docker-build
        name: 'üê≥ Docker build'
        services:
          - docker
        script:
          - *skip-bitbucket-authored-commits
          - docker build -t kidsloop-assessment .
  
    - step: &version-release
        name: 'üè∑Ô∏è Release Version Bump'
        image: node:16
        caches:
        - nodemodules
        script:
          - *skip-bitbucket-authored-commits
          - if [[ $BITBUCKET_BRANCH != master ]]; then echo "This can only be performed on master branch" && exit 1; fi

          - npm run release
          - export VERSION_TAG=$(git describe --tags)
          - 'echo "New release version: $VERSION_TAG - $(git log -1 --pretty=%h%B)"'
          - export TAG_EXISTS=$(git ls-remote origin refs/tags/$VERSION_TAG)
          - '[[ ! -z "$TAG_EXISTS" ]] && echo "$VERSION_TAG already exists" && exit 1'
          # - '[[ ! -z "$TAG_EXISTS" ]] && echo "Delete remote tag $VERSION_TAG" && git push --delete origin "$VERSION_TAG"'
          - git push origin master
          - git push origin --tags

    - step: &slack-notification-version-release
        name: 'üîî Slack: Version Release'
        script:
          - *skip-bitbucket-authored-commits
          - pipe: atlassian/slack-notify:2.0.0
            variables:
              WEBHOOK_URL: $SLACK_WEBHOOK
              MESSAGE: '"üè∑Ô∏è A new version of Assessment Service ($(echo $BITBUCKET_COMMIT | cut -c1-7)) has been merged into $BITBUCKET_BRANCH"'
    
    ##
    ## These steps won't be skipped when bitbucket is the author
    ##
    - step: &npm-install-and-build
        name: '‚ö° npm install and build'
        image: node:16
        script:
          - npm i
          - npm run build
        caches:
          - nodemodules
        artifacts:
          - node_modules/**
          - dist/**

    - step: &slack-notification-build
        name: 'üîî Slack: Build'
        script:
          - pipe: docker://cabauman/slack-notify-commits:0.6.0
            variables:
              WEBHOOK_URL: $SLACK_WEBHOOK
              MESSAGE: '"üöÄ A new build of Assessment Service ($BITBUCKET_TAG) has been pushed to ECR"'
              BITBUCKET_USER: $PIPELINE_READER_BITBUCKET_USER
              BITBUCKET_APP_PASSWORD: $PIPELINE_READER_BITBUCKET_APP_PASSWORD

pipelines:
  pull-requests:
    '**': # This runs as default for any branch not elsewhere defined.:
      - step: *npm-install-and-test
      - step:
          name: 'üìù Conventional Commits check'
          image: node:lts
          script:
            - /bin/bash commitlint-pipeline-check.sh
      - step: *npm-build
      - step: *docker-build

  branches:
    master:
      - step: *npm-install-and-test
      - step: *npm-build
      - step: *docker-build
      - step: *version-release
      - step: *slack-notification-version-release

  tags:
    '*':
      - step: *npm-install-and-build
      - step:
          name: 'üöÄ Docker build + push to ECR'
          deployment: release
          image: python:3.9-alpine
          services:
            - docker
          script: *docker-build-and-push-to-aws
      - step: *slack-notification-build
